<#id#>29</#id#>
<#id_contents#>1298</#id_contents#>
<#title#>Conventions de développement</#title#>
<#encoded_title#>conventions-de-developpement</#encoded_title#>
<#hits#>917</#hits#>
<#id_cat#>5</#id_cat#>
<#is_cat#>0</#is_cat#>
<#defined_status#>0</#defined_status#>
<#undefined_status#></#undefined_status#>
<#redirect#>0</#redirect#>
<#auth#></#auth#>
<#cat_id#>5</#cat_id#>
<#cat_id_parent#>0</#cat_id_parent#>
<#cat_article_id#>159</#cat_article_id#>
<#con_id_contents#>1298</#con_id_contents#>
<#con_id_article#>29</#con_id_article#>
<#menu#><ol class="wiki_list_1"><li><a href="#paragraph_indentation">Indentation</a><ol class="wiki_list_2"><li><a href="#paragraph_les-conditions">Les conditions</a><ol class="wiki_list_3"><li><a href="#paragraph_conditions-simples">Conditions simples</a></li><li><a href="#paragraph_traitement-sur-plusieurs-lignes">Traitement sur plusieurs lignes</a></li><li><a href="#paragraph_avec-imbrication">Avec imbrication</a></li></ol></li><li><a href="#paragraph_les-boucles">Les boucles</a></li></ol></li><li><a href="#paragraph_les-variables">Les variables</a></li><li><a href="#paragraph_les-classes">Les classes</a><ol class="wiki_list_2"><li><a href="#paragraph_nommage">Nommage</a></li><li><a href="#paragraph_les-fonctions">Les fonctions</a></li></ol></li></ol></#menu#>
<#activ#>1</#activ#>
<#user_id#>1760</#user_id#>
<#user_ip#>82.224.142.186</#user_ip#>
<#timestamp#>1405162535</#timestamp#>
<#content#>Il est important dans un projet que les développeurs adoptent un style de développement identique. Ceci favorise la relecture du code et le débogage.

Ces règles n'est pas obligatoire, mais très fortement recommandée pour vos développements.

-- Indentation --

Le style d'indentation adopté sur PHPBoost permet de gagner en lisibilité et en clarté du code.
L'utilisation des tabulations et des espaces est très importante dans le code. Il faut aérer votre code pour le rendre plus lisible.

Nous allons voir plusieurs exemple ci-dessous.


--- Les conditions ---

Un espace avant la parenthèse. Les accolades ne sont pas sur la même ligne que la condition.
Il faut indenter le code.

---- Conditions simples ----

[code=php]if ($var == 2)
{
	echo 'La variable vaut 2';
}[/code]

---- Traitement sur plusieurs lignes ----

[code=php]if ($var == 2)
{
	echo 'test';
}
elseif ($var == 3)
{
	echo 'La variable vaut 3';
}
else
{
	echo 'La variable ne vaut ni 2, ni 3';
}[/code]

---- Avec imbrication ----

[code=php]if ($var &gt; 0)
{
	if ($var == 2)
	{
		echo 'test';
	}
	elseif ($var == 3)
	{
		echo 'La variable vaut 3';
	}
	else
	{
		echo 'La variable ne vaut ni 2, ni 3';
	}
}[/code]

Il s'agit donc d'indenter le code et non la partie déclarative.


--- Les boucles ---

[code=php]for ($i = 0; $i &lt; 5; $i++)
{
	echo $i;
}[/code]

[code=php]$i = 0;
while ($i &lt; 5)
{
	echo $i;
	$i++;
}[/code]


-- Les variables --

Par convention, toutes les variables, y compris les variables de classes, doivent commencer par une minuscule.

Si la variable est une suite de mots, ils devront être séparés d'un tiret bas ou underscore (_).

Exemple : 

[code=php]$ma_variable[/code]

-- Les classes --

Les classes ont également un traitement particulier en terme de convention.


--- Nommage ---


Les classes doivent toujours commencer par une majuscule :

[code=php]class Class
{

}[/code]

Si la classe est une suite de mot, chaque mot commence par une majuscule et ne sera séparé d'aucune manière :

[code=php]class MyClass
{

}[/code]


--- Les fonctions ---

Les fonctions doivent être en minuscule avec un underscore entre chaque mot. 

[code=php]class MyClass
{
	private $name = 'PHPBoost';
	
	public function get_name()
	{
		return $this-&gt;name;
	}
}[/code]</#content#>
