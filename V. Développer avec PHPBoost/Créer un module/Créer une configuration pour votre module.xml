<?xml version="1.0" encoding="iso-8859-1"?>
<wiki_article>
  <wiki_id>135</wiki_id>
  <wiki_id_contents>484</wiki_id_contents>
  <wiki_title>Créer une configuration pour votre module</wiki_title>
  <wiki_encoded_title>creer-une-configuration-pour-votre-module</wiki_encoded_title>
  <wiki_hits>1897</wiki_hits>
  <wiki_id_cat>7</wiki_id_cat>
  <wiki_is_cat>0</wiki_is_cat>
  <wiki_defined_status>0</wiki_defined_status>
  <wiki_undefined_status></wiki_undefined_status>
  <wiki_redirect>0</wiki_redirect>
  <wiki_auth></wiki_auth>
  <wiki_cat_id>7</wiki_cat_id>
  <wiki_cat_id_parent>5</wiki_cat_id_parent>
  <wiki_cat_article_id>7</wiki_cat_article_id>
  <wiki_con_id_contents>484</wiki_con_id_contents>
  <wiki_con_id_article>135</wiki_con_id_article>
  <wiki_menu><ol class="wiki_list_1"><li><a href="#paragraph_mise-en-place">Mise en place</a></li><li><a href="#paragraph_utilisation">Utilisation</a></li><li><a href="#paragraph_conseils">Conseils</a></li></ol></wiki_menu>
  <wiki_activ>1</wiki_activ>
  <wiki_user_id>982</wiki_user_id>
  <wiki_user_ip>78.224.128.79</wiki_user_ip>
  <wiki_timestamp>1353747218</wiki_timestamp>
  <wiki_content>PHPBoost intègre une solution complète de gestion de configuration. Celle-ci est stockée automatiquement dans la Base de données, mais crée également un fichier de cache (bien plus rapide pour un accès très fréquent que la recherche en base de données).  Selon la configuration du serveur, elle peut être stockée sur le disque dur ou dans la mémoire RAM du serveur (encore plus rapide).

Nous allons voir comment utiliser ces outils mis en place par le framework.

-- Mise en place --

Il va falloir créer une classe, par exemple [i]MyModuleConfig[/i]. Elle doit être crée dans un fichier : [i]MyModuleConfig.class.php[/i]

Elle devra être une classe fille de [i]AbstractConfigData[/i]. Voici un exemple :

[code=php]&lt;?php
class MyModuleConfig extends AbstractConfigData
{
        //Renvoie le nom de votre module
	public function get_name()
	{
                //Retourne la valeur contenue dans le tableau de la configuration avec comme clé = name
		return $this-&gt;get_property('name');
	}

        //Modifie le nom de votre module
	public function set_name($name)
	{
                // Modifie la configuration avec comme clé = name
		$this-&gt;set_property('name', $name);
	}
	
	public function get_default_values()
	{
		// Tableau de la configuration par défaut
		return array(
			'name' =&gt; 'Nom de votre module'
		);
	}

	/**
	 * Returns the configuration.
	 * @return MyModuleConfig
	 */
	public static function load()
	{
		return ConfigManager::load(__CLASS__, 'my-module', 'config');
	}

	/**
	 * Saves the configuration in the database. Has it become persistent.
	 */
	public static function save()
	{
		ConfigManager::save('my-module', self::load(), 'config');
	}
}
?&gt;[/code]

-- Utilisation --

Pour récupérer la configuration de votre module :

[code=php]//Renvoie l'objet MyModuleConfig avec la configuration (par défaut si besoin)
$config = MyModuleConfig::load();

// Affiche le nom de votre module
echo $config-&gt;get_name();[/code]

Pour modifier la configuration :
[code=php]
//Renvoie l'objet MyModuleConfig avec la configuration (par défaut si besoin)
$config = MyModuleConfig::load();

// On met en place la nouvelle valeur
$config-&gt;set_name('ma nouvelle valeur');

//On sauvegarde la config
MyModuleConfig::save();[/code]

-- Conseils --

Pour une meilleure qualité du code, les clés des tableaux doivent être stockées dans des constantes. 

Exemple : 

[code=php]&lt;?php
class MyModuleConfig extends AbstractConfigData
{
	const NAME = 'name';
	
   	//Renvoie le nom de votre module
	public function get_name()
	{
		return $this-&gt;get_property(self::NAME);
	}

        //Modifie le nom de votre module
	public function set_name($name)
	{
		$this-&gt;set_property(self::NAME, $name);
	}
	
	public function get_default_values()
	{
		// Tableau de la configuration par défaut
		return array(
			self::NAME =&gt; 'Nom de votre module'
		);
	}

	/**
	 * Returns the configuration.
	 * @return MyModuleConfig
	 */
	public static function load()
	{
		return ConfigManager::load(__CLASS__, 'my-module', 'config');
	}

	/**
	 * Saves the configuration in the database. Has it become persistent.
	 */
	public static function save()
	{
		ConfigManager::save('my-module', self::load(), 'config');
	}
}
?&gt;[/code]</wiki_content>
</wiki_article>